// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Implementation {
  id       Int        @id @default(autoincrement())
  address  String     @unique
  abi      Json
  Project  Project[]
  Minter   Minter[]
  Vester   Vester[]
  Offseter Offseter[]
  Yielder  Yielder[]
  Payment  Payment[]
  Badge    Badge[]
}

model Uri {
  id      Int       @id @default(autoincrement())
  uri     String    @unique
  data    Json
  Project Project[]
  Badge   Badge[]
}

model Project {
  id               Int             @id @default(autoincrement())
  address          String          @unique
  name             String
  symbol           String
  totalSupply      Int
  owner            String
  tonEquivalent    Float
  times            DateTime[]
  absorptions      Float[]
  setup            Boolean
  Minter           Minter[]
  Offseter         Offseter[]
  Yielder          Yielder[]
  Transfer         Transfer[]
  Implementation   Implementation? @relation(fields: [implementationId], references: [id])
  implementationId Int?
  Uri              Uri?            @relation(fields: [uriId], references: [id])
  uriId            Int?
}

model Payment {
  id               Int             @id @default(autoincrement())
  address          String          @unique
  name             String
  symbol           String
  decimals         Int
  Minter           Minter[]
  Implementation   Implementation? @relation(fields: [implementationId], references: [id])
  implementationId Int?
}

model Minter {
  id                  Int             @id @default(autoincrement())
  address             String          @unique
  maxSupply           Int
  reservedSupply      Int
  preSaleOpen         Boolean
  publicSaleOpen      Boolean
  maxBuyPerTx         Int
  unitPrice           Float
  whitelistMerkleRoot String
  soldOut             Boolean
  totalValue          Float
  Whitelist           Json?
  Project             Project         @relation(fields: [projectId], references: [id])
  projectId           Int
  Payment             Payment         @relation(fields: [paymentId], references: [id])
  paymentId           Int
  Implementation      Implementation? @relation(fields: [implementationId], references: [id])
  implementationId    Int?
}

model Offseter {
  id               Int             @id @default(autoincrement())
  address          String          @unique
  totalDeposited   Float
  totalClaimed     Float
  totalClaimable   Float
  minClaimable     Float
  Project          Project         @relation(fields: [projectId], references: [id])
  projectId        Int
  Implementation   Implementation? @relation(fields: [implementationId], references: [id])
  implementationId Int?
}

model Snapshot {
  id                         Int      @id @default(autoincrement())
  previousTime               DateTime
  previousProjectAbsorption  Float
  previousOffseterAbsorption Float
  previousYielderAbsorption  Float
  currentProjectAbsorption   Float
  currentOffseterAbsorption  Float
  currentYielderAbsorption   Float
  projectAbsorption          Float
  offseterAbsorption         Float
  yielderAbsorption          Float
  time                       DateTime
  Yielder                    Yielder  @relation(fields: [yielderId], references: [id], onDelete: Cascade)
  yielderId                  Int

  @@unique([yielderId, time], name: "snapshotIdentifier")
}

model Yielder {
  id               Int             @id @default(autoincrement())
  address          String          @unique
  totalDeposited   Float
  totalAbsorption  Float
  snapshotedTime   DateTime
  snapshot         Snapshot[]
  vesting          Vesting[]
  Project          Project         @relation(fields: [projectId], references: [id])
  projectId        Int
  Vester           Vester          @relation(fields: [vesterId], references: [id])
  vesterId         Int
  Implementation   Implementation? @relation(fields: [implementationId], references: [id])
  implementationId Int?
}

model Vesting {
  id        Int      @id @default(autoincrement())
  amount    Float
  time      DateTime @unique
  Yielder   Yielder  @relation(fields: [yielderId], references: [id], onDelete: Cascade)
  yielderId Int

  @@unique([yielderId, time], name: "vestingIdentifier")
}

model Vester {
  id                 Int             @id @default(autoincrement())
  address            String          @unique
  totalAmount        Float
  withdrawableAmount Float
  Yielder            Yielder[]
  Implementation     Implementation? @relation(fields: [implementationId], references: [id])
  implementationId   Int?
}

model Transfer {
  id        Int      @id @default(autoincrement())
  hash      String
  from      String
  to        String
  tokenId   Float
  time      DateTime
  Project   Project  @relation(fields: [projectId], references: [id])
  projectId Int

  @@unique([projectId, hash, from, to, tokenId], name: "transferIdentifier")
}

model Badge {
  id               Int             @id @default(autoincrement())
  address          String          @unique
  name             String
  owner            String
  Implementation   Implementation? @relation(fields: [implementationId], references: [id])
  implementationId Int?
  Uri              Uri?            @relation(fields: [uriId], references: [id])
  uriId            Int?
}
