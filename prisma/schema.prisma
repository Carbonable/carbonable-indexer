// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id             Int        @id @default(autoincrement())
  address        String     @unique
  implementation String
  name           String
  symbol         String
  totalSupply    Int
  contractUri    String
  owner          String
  tonEquivalent  Float
  times          DateTime[]
  absorptions    Float[]
  Minter         Minter[]
  Token          Token[]
  Snapshot       Snapshot[]
  Offseter       Offseter[]
  Yielder        Yielder[]
}

model Payment {
  id       Int      @id @default(autoincrement())
  address  String   @unique
  decimals Int
  Minter   Minter[]
}

model Minter {
  id                  Int     @id @default(autoincrement())
  address             String  @unique
  implementation      String
  maxSupply           Int
  reservedSupply      Int
  preSaleOpen         Boolean
  publicSaleOpen      Boolean
  maxBuyPerTx         Int
  unitPrice           Int
  whitelistMerkleRoot Int
  soldOut             Boolean
  totalValue          Float
  Whitelist           Json?
  Project             Project @relation(fields: [projectId], references: [id])
  projectId           Int
  Payment             Payment @relation(fields: [paymentId], references: [id])
  paymentId           Int
}

model Token {
  id       Int    @id @default(autoincrement())
  token_id Int
  uri      String
  owner    String

  Project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Offseter {
  id             Int     @id @default(autoincrement())
  address        String  @unique
  implementation String
  totalDeposited Int
  totalClaimed   Float
  totalClaimable Float
  minClaimable   Float
  Project        Project @relation(fields: [projectId], references: [id])
  projectId      Int
}

model Snapshot {
  id                           Int      @id @default(autoincrement())
  previous_time                DateTime
  previous_project_absorption  Int
  previous_offseter_absorption Int
  previous_yielder_absorption  Int
  current_project_absorption   Int
  current_offseter_absorption  Int
  current_yielder_absorption   Int
  project_absorption           Int
  offseter_absorption          Int
  yielder_absorption           Int
  time                         DateTime
  Yielder                      Yielder  @relation(fields: [yielderId], references: [id])
  yielderId                    Int
  Project                      Project  @relation(fields: [projectId], references: [id])
  projectId                    Int
}

model Yielder {
  id              Int        @id @default(autoincrement())
  address         String     @unique
  implementation  String
  totalDeposited  Float
  totalAbsorption Float
  snapshotedTime  DateTime
  snapshot        Snapshot[]
  vesting         Vesting[]
  Project         Project    @relation(fields: [projectId], references: [id])
  projectId       Int
}

model Vesting {
  id         Int      @id @default(autoincrement())
  vesting_id Int
  claimable  Int
  time       DateTime
  user       String
  Yielder    Yielder  @relation(fields: [yielderId], references: [id])
  yielderId  Int
  Vester     Vester   @relation(fields: [vesterId], references: [id])
  vesterId   Int
}

model Vester {
  id                 Int       @id @default(autoincrement())
  address            String    @unique
  implementation     String
  totalAmount        Float
  withdrawableAmount Float
  vesting            Vesting[]
}

model Block {
  id     Int    @id @default(autoincrement())
  name   String @unique
  number Int
}
